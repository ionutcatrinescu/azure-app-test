name: Multi-Environment CICD Pipeline for Azure

on:
  push:
    branches:
      - main  
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment to deploy to"
        required: true
        default: "dev" 
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read 
  secrets: read   

jobs:
  # === Step 1: Build and Push Docker Image ===
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Azure Container Registry
      run: |
        echo ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }} | docker login ${{ secrets.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} --password-stdin

    - name: Cache Docker Layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Build and Push Docker Image
      run: |
        docker buildx build --push \
          --tag ${{ secrets.AZURE_CONTAINER_REGISTRY }}/myproject:${{ github.sha }} \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          --cache-from=type=local,src=/tmp/.buildx-cache .

    - name: Verify Docker Image Exists
      run: docker inspect ${{ secrets.AZURE_CONTAINER_REGISTRY }}/myproject:${{ github.sha }}

  # === Step 2: Infrastructure Provisioning using Terraform ===
  terraform-deploy:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push-docker

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Initialize Terraform
      run: |
        terraform init -backend-config="key=${{ github.event.inputs.environment }}.tfstate" -reconfigure

    - name: Validate Terraform Configurations
      run: terraform validate

    - name: Plan Terraform for ${{ github.event.inputs.environment }}
      run: |
        terraform plan -var-file=env/${{ github.event.inputs.environment }}.tfvars \
          -var="postgresql_admin_password=${{ secrets.POSTGRESQL_PASSWORD }}" \
          -var="postgresql_database_name=${{ secrets.POSTGRESQL_DBNAME }}"

    - name: Apply Terraform Changes for ${{ github.event.inputs.environment }}
      run: |
        terraform apply -auto-approve -var-file=env/${{ github.event.inputs.environment }}.tfvars \
          -var="postgresql_admin_password=${{ secrets.POSTGRESQL_PASSWORD }}" \
          -var="postgresql_database_name=${{ secrets.POSTGRESQL_DBNAME }}"

  # === Step 3: Deploy Application to Azure App Service ===
  deploy-app:
    name: Deploy Application to App Service
    runs-on: ubuntu-latest
    needs: terraform-deploy

    steps:
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Container to Azure App Service
      run: |
        az webapp deployment source config-container \
          --name ${{ secrets.APP_SERVICE_NAME_${{ github.event.inputs.environment | upper }} }} \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME_${{ github.event.inputs.environment | upper }} }} \
          --docker-custom-image-name ${{ secrets.AZURE_CONTAINER_REGISTRY }}/myproject:${{ github.sha }}

  # === Step 4: Post-Deployment Tests ===
  post-deployment-tests:
    name: Post-Deployment Application Tests
    runs-on: ubuntu-latest
    needs: deploy-app

    steps:
    - name: Verify Application Health
      run: |
        curl -f https://${{ secrets.APP_SERVICE_URL_${{ github.event.inputs.environment | upper }} }}/health || exit 1

    - name: Execute API Test
      run: |
        curl -f https://${{ secrets.APP_SERVICE_URL_${{ github.event.inputs.environment | upper }} }}/db-test || exit 1